#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// de.hsbremen.tc.tnc.natives.CLibrary.UTSNAME
	c10 [label=<<table title="de.hsbremen.tc.tnc.natives.CLibrary.UTSNAME" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./CLibrary.UTSNAME.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> UTSNAME </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + sysname : byte[] </td></tr>
<tr><td align="left" balign="left"> + nodename : byte[] </td></tr>
<tr><td align="left" balign="left"> + release : byte[] </td></tr>
<tr><td align="left" balign="left"> + version : byte[] </td></tr>
<tr><td align="left" balign="left"> + machine : byte[] </td></tr>
<tr><td align="left" balign="left"> + domainname : byte[] </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + CLibrary.UTSNAME() </td></tr>
<tr><td align="left" balign="left"> # getFieldOrder() : List&lt;?&gt; </td></tr>
		</table></td></tr>
		</table>>, URL="./CLibrary.UTSNAME.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//de.hsbremen.tc.tnc.natives.CLibrary.UTSNAME extends com.sun.jna.Structure
	c11:p -> c10:p [dir=back,arrowtail=empty];
	// com.sun.jna.Structure
	c11 [label=<<table title="com.sun.jna.Structure" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/com/sun/jna/Structure.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Structure </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ALIGN_DEFAULT : int </td></tr>
<tr><td align="left" balign="left"> + ALIGN_NONE : int </td></tr>
<tr><td align="left" balign="left"> + ALIGN_GNUC : int </td></tr>
<tr><td align="left" balign="left"> + ALIGN_MSVC : int </td></tr>
<tr><td align="left" balign="left"> # CALCULATE_SIZE : int </td></tr>
<tr><td align="left" balign="left"> ~ layoutInfo : Map&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> ~ fieldOrder : Map&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> - memory : Pointer </td></tr>
<tr><td align="left" balign="left"> - size : int </td></tr>
<tr><td align="left" balign="left"> - alignType : int </td></tr>
<tr><td align="left" balign="left"> - encoding : String </td></tr>
<tr><td align="left" balign="left"> - actualAlignType : int </td></tr>
<tr><td align="left" balign="left"> - structAlignment : int </td></tr>
<tr><td align="left" balign="left"> - structFields : Map&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> - nativeStrings : Map&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> - typeMapper : TypeMapper </td></tr>
<tr><td align="left" balign="left"> - typeInfo : long </td></tr>
<tr><td align="left" balign="left"> - autoRead : boolean </td></tr>
<tr><td align="left" balign="left"> - autoWrite : boolean </td></tr>
<tr><td align="left" balign="left"> - array : Structure[] </td></tr>
<tr><td align="left" balign="left"> - readCalled : boolean </td></tr>
<tr><td align="left" balign="left"> - reads : ThreadLocal&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> - busy : ThreadLocal&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> - PLACEHOLDER_MEMORY : Pointer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # Structure() </td></tr>
<tr><td align="left" balign="left"> # Structure(arg0 : TypeMapper) </td></tr>
<tr><td align="left" balign="left"> # Structure(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> # Structure(arg0 : int, arg1 : TypeMapper) </td></tr>
<tr><td align="left" balign="left"> # Structure(arg0 : Pointer) </td></tr>
<tr><td align="left" balign="left"> # Structure(arg0 : Pointer, arg1 : int) </td></tr>
<tr><td align="left" balign="left"> # Structure(arg0 : Pointer, arg1 : int, arg2 : TypeMapper) </td></tr>
<tr><td align="left" balign="left"> ~ fields() : Map&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> ~ getTypeMapper() : TypeMapper </td></tr>
<tr><td align="left" balign="left"> - initializeTypeMapper(arg0 : TypeMapper) </td></tr>
<tr><td align="left" balign="left"> - layoutChanged() </td></tr>
<tr><td align="left" balign="left"> # setStringEncoding(arg0 : String) </td></tr>
<tr><td align="left" balign="left"> # getStringEncoding() : String </td></tr>
<tr><td align="left" balign="left"> # setAlignType(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> # autoAllocate(arg0 : int) : Memory </td></tr>
<tr><td align="left" balign="left"> # useMemory(arg0 : Pointer) </td></tr>
<tr><td align="left" balign="left"> # useMemory(arg0 : Pointer, arg1 : int) </td></tr>
<tr><td align="left" balign="left"> ~ useMemory(arg0 : Pointer, arg1 : int, arg2 : boolean) </td></tr>
<tr><td align="left" balign="left"> # ensureAllocated() </td></tr>
<tr><td align="left" balign="left"> - ensureAllocated(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> # allocateMemory() </td></tr>
<tr><td align="left" balign="left"> - allocateMemory(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> # allocateMemory(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + size() : int </td></tr>
<tr><td align="left" balign="left"> + clear() </td></tr>
<tr><td align="left" balign="left"> + getPointer() : Pointer </td></tr>
<tr><td align="left" balign="left"> ~ busy() : Set&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> ~ reading() : Map&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> ~ conditionalAutoRead() </td></tr>
<tr><td align="left" balign="left"> + read() </td></tr>
<tr><td align="left" balign="left"> # fieldOffset(arg0 : String) : int </td></tr>
<tr><td align="left" balign="left"> + readField(arg0 : String) : Object </td></tr>
<tr><td align="left" balign="left"> ~ getFieldValue(arg0 : Field) : Object </td></tr>
<tr><td align="left" balign="left"> ~ setFieldValue(arg0 : Field, arg1 : Object) </td></tr>
<tr><td align="left" balign="left"> - setFieldValue(arg0 : Field, arg1 : Object, arg2 : boolean) </td></tr>
<tr><td align="left" balign="left"> ~ updateStructureByReference(arg0 : Class&lt;&gt;, arg1 : Structure, arg2 : Pointer) : Structure </td></tr>
<tr><td align="left" balign="left"> # readField(arg0 : Structure.StructField) : Object </td></tr>
<tr><td align="left" balign="left"> + write() </td></tr>
<tr><td align="left" balign="left"> + writeField(arg0 : String) </td></tr>
<tr><td align="left" balign="left"> + writeField(arg0 : String, arg1 : Object) </td></tr>
<tr><td align="left" balign="left"> # writeField(arg0 : Structure.StructField) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # getFieldOrder() : List&lt;&gt; </font></td></tr>
<tr><td align="left" balign="left"> # setFieldOrder(arg0 : String[]) </td></tr>
<tr><td align="left" balign="left"> # sortFields(arg0 : List&lt;&gt;, arg1 : List&lt;&gt;) </td></tr>
<tr><td align="left" balign="left"> # getFieldList() : List&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> - fieldOrder() : List&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> - sort(arg0 : Collection&lt;&gt;) : List&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> # getFields(arg0 : boolean) : List&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> - calculateSize(arg0 : boolean) : int </td></tr>
<tr><td align="left" balign="left"> ~ size(arg0 : Class&lt;&gt;) : int </td></tr>
<tr><td align="left" balign="left"> ~ size(arg0 : Class&lt;&gt;, arg1 : Structure) : int </td></tr>
<tr><td align="left" balign="left"> ~ calculateSize(arg0 : boolean, arg1 : boolean) : int </td></tr>
<tr><td align="left" balign="left"> - validateField(arg0 : String, arg1 : Class&lt;&gt;) </td></tr>
<tr><td align="left" balign="left"> - validateFields() </td></tr>
<tr><td align="left" balign="left"> - deriveLayout(arg0 : boolean, arg1 : boolean) : Structure.LayoutInfo </td></tr>
<tr><td align="left" balign="left"> - initializeFields() </td></tr>
<tr><td align="left" balign="left"> - initializeField(arg0 : Field, arg1 : Class&lt;&gt;) : Object </td></tr>
<tr><td align="left" balign="left"> - addPadding(arg0 : int) : int </td></tr>
<tr><td align="left" balign="left"> - addPadding(arg0 : int, arg1 : int) : int </td></tr>
<tr><td align="left" balign="left"> # getStructAlignment() : int </td></tr>
<tr><td align="left" balign="left"> # getNativeAlignment(arg0 : Class&lt;&gt;, arg1 : Object, arg2 : boolean) : int </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + toString(arg0 : boolean) : String </td></tr>
<tr><td align="left" balign="left"> - format(arg0 : Class&lt;&gt;) : String </td></tr>
<tr><td align="left" balign="left"> - toString(arg0 : int, arg1 : boolean, arg2 : boolean) : String </td></tr>
<tr><td align="left" balign="left"> + toArray(arg0 : Structure[]) : Structure[] </td></tr>
<tr><td align="left" balign="left"> + toArray(arg0 : int) : Structure[] </td></tr>
<tr><td align="left" balign="left"> - baseClass() : Class&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + equals(arg0 : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> # cacheTypeInfo(arg0 : Pointer) </td></tr>
<tr><td align="left" balign="left"> ~ getFieldTypeInfo(arg0 : Structure.StructField) : Pointer </td></tr>
<tr><td align="left" balign="left"> ~ getTypeInfo() : Pointer </td></tr>
<tr><td align="left" balign="left"> + setAutoSynch(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + setAutoRead(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + getAutoRead() : boolean </td></tr>
<tr><td align="left" balign="left"> + setAutoWrite(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + getAutoWrite() : boolean </td></tr>
<tr><td align="left" balign="left"> ~ getTypeInfo(arg0 : Object) : Pointer </td></tr>
<tr><td align="left" balign="left"> - newInstance(arg0 : Class&lt;&gt;, arg1 : long) : Structure </td></tr>
<tr><td align="left" balign="left"> + newInstance(arg0 : Class&lt;&gt;, arg1 : Pointer) : Structure </td></tr>
<tr><td align="left" balign="left"> + newInstance(arg0 : Class&lt;&gt;) : Structure </td></tr>
<tr><td align="left" balign="left"> ~ typeInfoField() : Structure.StructField </td></tr>
<tr><td align="left" balign="left"> - structureArrayCheck(arg0 : Structure[]) </td></tr>
<tr><td align="left" balign="left"> + autoRead(arg0 : Structure[]) </td></tr>
<tr><td align="left" balign="left"> + autoRead() </td></tr>
<tr><td align="left" balign="left"> + autoWrite(arg0 : Structure[]) </td></tr>
<tr><td align="left" balign="left"> + autoWrite() </td></tr>
<tr><td align="left" balign="left"> # getNativeSize(arg0 : Class&lt;&gt;) : int </td></tr>
<tr><td align="left" balign="left"> # getNativeSize(arg0 : Class&lt;&gt;, arg1 : Object) : int </td></tr>
<tr><td align="left" balign="left"> ~ validate(arg0 : Class&lt;&gt;) </td></tr>
		</table></td></tr>
		</table>>, URL="http://java.sun.com/j2se/1.4.2/docs/api/com/sun/jna/Structure.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
}

